#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test de Configuration Unsplash - Seminary Blog
Script de validation compl√®te des fonctionnalit√©s images et illustrations
"""

import os
import sys
import argparse
import json
import time
from pathlib import Path
from typing import Dict, List, Optional

# Ajouter le r√©pertoire scripts au path
sys.path.append(str(Path(__file__).parent))

from image_handler import ImageHandler
from article_generator import ArticleGenerator

def test_unsplash_connection(access_key: str, secret_key: Optional[str] = None) -> Dict:
    """Teste la connexion √† l'API Unsplash."""
    print("üîå Test de connexion Unsplash API...")
    
    handler = ImageHandler(access_key, secret_key)
    config_status = handler.get_unsplash_config_status()
    
    results = {
        'connection': False,
        'config_status': config_status,
        'search_test': False,
        'download_test': False,
        'error': None
    }
    
    try:
        # Test de recherche simple
        print("   üì∏ Test de recherche d'images...")
        images = handler.search_images("business meeting", count=3)
        
        if images:
            results['search_test'] = True
            results['connection'] = True
            print(f"   ‚úÖ Trouv√© {len(images)} images")
            
            # Test de t√©l√©chargement si images trouv√©es
            if not images[0].get('is_fallback', False):
                print("   üíæ Test de t√©l√©chargement...")
                download_path = handler.download_image(images[0])
                if download_path:
                    results['download_test'] = True
                    print(f"   ‚úÖ Image t√©l√©charg√©e: {download_path}")
                    # Nettoyer le fichier de test
                    try:
                        Path(download_path).unlink()
                        print("   üßπ Fichier de test nettoy√©")
                    except:
                        pass
                else:
                    print("   ‚ùå √âchec du t√©l√©chargement")
            else:
                print("   ‚ÑπÔ∏è Images de fallback utilis√©es (pas de t√©l√©chargement)")
        else:
            print("   ‚ùå Aucune image trouv√©e")
            results['error'] = "Aucune image retourn√©e"
            
    except Exception as e:
        results['error'] = str(e)
        print(f"   ‚ùå Erreur: {e}")
    
    return results

def test_illustrations_css() -> Dict:
    """Teste la g√©n√©ration d'illustrations CSS/SVG."""
    print("\nüé® Test des illustrations CSS/SVG...")
    
    handler = ImageHandler()  # Pas besoin de cl√©s pour les illustrations
    results = {
        'chart_bar': False,
        'chart_progress': False,
        'infographic': False,
        'icons': False,
        'diagram': False,
        'suggestions': False,
        'generated_count': 0
    }
    
    try:
        # Test graphique en barres
        print("   üìä Test graphique en barres...")
        chart_html = handler.generate_css_illustration('chart', 'professional', chart_type='bar')
        if len(chart_html) > 100:
            results['chart_bar'] = True
            results['generated_count'] += 1
            print("   ‚úÖ Graphique en barres g√©n√©r√©")
        
        # Test graphique circulaire
        print("   üéØ Test graphique circulaire...")
        progress_html = handler.generate_css_illustration('chart', 'statistics', chart_type='progress')
        if len(progress_html) > 100:
            results['chart_progress'] = True
            results['generated_count'] += 1
            print("   ‚úÖ Graphique circulaire g√©n√©r√©")
        
        # Test infographie
        print("   üìã Test infographie...")
        infographic_html = handler.generate_css_illustration('infographic', 'team-building')
        if len(infographic_html) > 100:
            results['infographic'] = True
            results['generated_count'] += 1
            print("   ‚úÖ Infographie g√©n√©r√©e")
        
        # Test ic√¥nes
        print("   üî≤ Test grille d'ic√¥nes...")
        icons_html = handler.generate_css_illustration('icon', 'professional')
        if len(icons_html) > 100:
            results['icons'] = True
            results['generated_count'] += 1
            print("   ‚úÖ Grille d'ic√¥nes g√©n√©r√©e")
        
        # Test diagramme
        print("   üîÑ Test diagramme de flux...")
        diagram_html = handler.generate_css_illustration('diagram', 'process')
        if len(diagram_html) > 100:
            results['diagram'] = True
            results['generated_count'] += 1
            print("   ‚úÖ Diagramme de flux g√©n√©r√©")
        
        # Test suggestions automatiques
        print("   ü§ñ Test suggestions automatiques...")
        test_content = """
        Ce s√©minaire permet d'am√©liorer la coh√©sion d'√©quipe de 85% en moyenne.
        Le processus Seminary comprend 4 √©tapes principales pour maximiser les r√©sultats.
        Les statistiques montrent une progression significative de la motivation.
        """
        suggestions = handler.suggest_illustrations_for_article(test_content, "S√©minaire Team Building")
        
        if suggestions:
            results['suggestions'] = True
            print(f"   ‚úÖ {len(suggestions)} suggestions g√©n√©r√©es")
            for i, sugg in enumerate(suggestions, 1):
                print(f"      {i}. {sugg['type']} - {sugg['title']}")
        
    except Exception as e:
        print(f"   ‚ùå Erreur lors du test d'illustrations: {e}")
    
    return results

def test_visual_integration(access_key: Optional[str] = None, secret_key: Optional[str] = None) -> Dict:
    """Teste l'int√©gration visuelle compl√®te dans un article."""
    print("\nüñºÔ∏è Test d'int√©gration visuelle compl√®te...")
    
    results = {
        'article_generation': False,
        'visual_integration': False,
        'elements_count': 0,
        'error': None
    }
    
    try:
        # Cr√©er un g√©n√©rateur d'articles de test
        if not access_key:
            print("   ‚ÑπÔ∏è Pas de cl√© Unsplash - test illustrations uniquement")
        
        # Simuler des donn√©es d'article
        mock_article_data = {
            'content': """
            <h1>Les Vosges : destination privil√©gi√©e pour vos s√©minaires d'entreprise</h1>
            <p>Les Vosges offrent un cadre exceptionnel pour organiser des s√©minaires d'entreprise r√©ussis.</p>
            <p>Les statistiques montrent que 85% des participants constatent une am√©lioration de la coh√©sion d'√©quipe.</p>
            <p>Le processus Seminary comprend plusieurs √©tapes cl√©s pour maximiser l'impact de votre s√©minaire.</p>
            <p>La performance des √©quipes s'am√©liore significativement apr√®s un s√©minaire dans ce cadre naturel.</p>
            """,
            'metadata': {
                'title': 'S√©minaires Team Building dans les Vosges - Guide Complet',
                'description': 'D√©couvrez comment les Vosges peuvent transformer vos s√©minaires d\'entreprise'
            },
            'word_count': 150
        }
        
        # Test avec ImageHandler uniquement
        handler = ImageHandler(access_key, secret_key)
        
        # Test int√©gration visuelle
        mock_html = f"""
        <div class="article-content">
            {mock_article_data['content']}
        </div>
        """
        
        # Simuler la m√©thode d'int√©gration visuelle
        from bs4 import BeautifulSoup
        soup = BeautifulSoup(mock_html, 'html.parser')
        visual_elements_added = []
        
        # Ajouter des illustrations automatiquement
        content_text = mock_article_data['content']
        title = mock_article_data['metadata']['title']
        
        illustration_suggestions = handler.suggest_illustrations_for_article(content_text, title)
        
        content_div = soup.find('div', class_='article-content')
        if content_div and illustration_suggestions:
            for i, suggestion in enumerate(illustration_suggestions[:2]):
                try:
                    illustration_html = handler.generate_css_illustration(
                        suggestion['type'],
                        'professional',
                        **suggestion
                    )
                    
                    # Cr√©er un conteneur pour l'illustration
                    illustration_div = soup.new_tag('div', class_='visual-illustration')
                    illustration_div.string = illustration_html
                    
                    # Ins√©rer √† la fin pour le test
                    content_div.append(illustration_div)
                    visual_elements_added.append(f"Illustration {suggestion['type']}: {suggestion['title']}")
                    
                except Exception as e:
                    print(f"      ‚ùå Erreur illustration {suggestion['type']}: {e}")
        
        if visual_elements_added:
            results['visual_integration'] = True
            results['elements_count'] = len(visual_elements_added)
            print(f"   ‚úÖ {len(visual_elements_added)} √©l√©ments visuels int√©gr√©s:")
            for element in visual_elements_added:
                print(f"      ‚Ä¢ {element}")
        
        # Test avec images Unsplash si cl√© disponible
        if access_key:
            try:
                print("   üì∏ Test int√©gration images Unsplash...")
                config_status = handler.get_unsplash_config_status()
                print(f"      Mode: {'Production' if not config_status['demo_mode'] else 'D√©mo'}")
                print(f"      Requ√™tes restantes: {config_status['requests_remaining']}")
                
                image_suggestions = handler.suggest_images_for_article(content_text, title)
                if image_suggestions and not image_suggestions[0].get('is_fallback', False):
                    print(f"      ‚úÖ {len(image_suggestions)} suggestions d'images Unsplash")
                    results['elements_count'] += 1
                else:
                    print("      ‚ÑπÔ∏è Images de fallback utilis√©es")
                    
            except Exception as e:
                print(f"      ‚ùå Erreur images Unsplash: {e}")
        
        results['article_generation'] = True
        
    except Exception as e:
        results['error'] = str(e)
        print(f"   ‚ùå Erreur: {e}")
    
    return results

def generate_test_report(unsplash_results: Dict, illustrations_results: Dict, integration_results: Dict) -> str:
    """G√©n√®re un rapport de test complet."""
    
    report = f"""
# üìä RAPPORT DE TEST - CONFIGURATION UNSPLASH & ILLUSTRATIONS

## üîå Connexion Unsplash API

**Status**: {'‚úÖ SUCC√àS' if unsplash_results['connection'] else '‚ùå √âCHEC'}

### Configuration
- **Mode**: {'Production' if not unsplash_results['config_status']['demo_mode'] else 'D√©mo'}
- **Access Key**: {'‚úÖ Configur√©e' if unsplash_results['config_status']['access_key_configured'] else '‚ùå Manquante'}
- **Secret Key**: {'‚úÖ Configur√©e' if unsplash_results['config_status']['secret_key_configured'] else '‚ùå Manquante'}
- **Limite**: {unsplash_results['config_status']['rate_limit_per_hour']} requ√™tes/heure
- **Utilis√©es**: {unsplash_results['config_status']['requests_used']}
- **Restantes**: {unsplash_results['config_status']['requests_remaining']}

### Tests
- **Recherche d'images**: {'‚úÖ' if unsplash_results['search_test'] else '‚ùå'}
- **T√©l√©chargement**: {'‚úÖ' if unsplash_results['download_test'] else '‚ùå'}

{f"**Erreur**: {unsplash_results['error']}" if unsplash_results['error'] else ""}

## üé® Illustrations CSS/SVG

**Status**: {'‚úÖ SUCC√àS' if illustrations_results['generated_count'] > 0 else '‚ùå √âCHEC'}

### G√©n√©ration d'Illustrations ({illustrations_results['generated_count']}/5)
- **Graphique en barres**: {'‚úÖ' if illustrations_results['chart_bar'] else '‚ùå'}
- **Graphique circulaire**: {'‚úÖ' if illustrations_results['chart_progress'] else '‚ùå'}
- **Infographie**: {'‚úÖ' if illustrations_results['infographic'] else '‚ùå'}
- **Grille d'ic√¥nes**: {'‚úÖ' if illustrations_results['icons'] else '‚ùå'}
- **Diagramme de flux**: {'‚úÖ' if illustrations_results['diagram'] else '‚ùå'}
- **Suggestions auto**: {'‚úÖ' if illustrations_results['suggestions'] else '‚ùå'}

## üñºÔ∏è Int√©gration Visuelle

**Status**: {'‚úÖ SUCC√àS' if integration_results['visual_integration'] else '‚ùå √âCHEC'}

- **√âl√©ments int√©gr√©s**: {integration_results['elements_count']}
- **Article de test**: {'‚úÖ' if integration_results['article_generation'] else '‚ùå'}

{f"**Erreur**: {integration_results['error']}" if integration_results['error'] else ""}

## üìã R√©sum√© Global

| Composant | Status | Score |
|-----------|--------|-------|
| API Unsplash | {'‚úÖ' if unsplash_results['connection'] else '‚ùå'} | {('2/2' if unsplash_results['search_test'] and unsplash_results['download_test'] else '1/2' if unsplash_results['search_test'] else '0/2')} |
| Illustrations CSS | {'‚úÖ' if illustrations_results['generated_count'] >= 4 else '‚ùå'} | {illustrations_results['generated_count']}/5 |
| Int√©gration | {'‚úÖ' if integration_results['visual_integration'] else '‚ùå'} | {integration_results['elements_count']} √©l√©ments |

## üöÄ Prochaines √âtapes

{'### ‚úÖ Configuration Compl√®te - Pr√™t pour Production' if (unsplash_results['connection'] and illustrations_results['generated_count'] >= 4) else '### ‚ö†Ô∏è Configuration Partielle'}

{'''
1. **Images Unsplash**: Syst√®me op√©rationnel
2. **Illustrations CSS**: Toutes fonctionnelles  
3. **Int√©gration**: Automatique dans articles
4. **Monitoring**: Quotas suivis en temps r√©el

Votre blog Seminary peut maintenant g√©n√©rer des articles avec images et illustrations automatiquement !
''' if (unsplash_results['connection'] and illustrations_results['generated_count'] >= 4) else '''

**√Ä faire:**
''' + (f"- Configurer la cl√© Unsplash API" if not unsplash_results['connection'] else "") + f'''
- V√©rifier les erreurs dans les logs
- Relancer les tests apr√®s correction

**Aide:** Consultez docs/UNSPLASH_SETUP.md pour la configuration d√©taill√©e.
'''
}

---
*Test g√©n√©r√© le {time.strftime('%Y-%m-%d %H:%M:%S')}*
"""
    
    return report

def main():
    """Point d'entr√©e principal du script de test."""
    parser = argparse.ArgumentParser(description="Test de Configuration Unsplash - Seminary Blog")
    parser.add_argument('--access-key', help='Cl√© d\'acc√®s Unsplash (optionnel)')
    parser.add_argument('--secret-key', help='Cl√© secr√®te Unsplash (optionnel)')
    parser.add_argument('--save-report', help='Sauvegarder le rapport dans un fichier')
    parser.add_argument('--test-only', choices=['unsplash', 'illustrations', 'integration'], 
                      help='Tester uniquement un composant sp√©cifique')
    
    args = parser.parse_args()
    
    # Utiliser les variables d'environnement si pas d'arguments
    access_key = args.access_key or os.getenv('UNSPLASH_ACCESS_KEY')
    secret_key = args.secret_key or os.getenv('UNSPLASH_SECRET_KEY')
    
    print("üß™ D√âBUT DES TESTS - CONFIGURATION UNSPLASH & ILLUSTRATIONS")
    print("=" * 60)
    
    # Initialiser les r√©sultats
    unsplash_results = {
        'connection': False, 
        'config_status': {
            'demo_mode': True,
            'access_key_configured': False,
            'secret_key_configured': False,
            'rate_limit_per_hour': 50,
            'requests_used': 0,
            'requests_remaining': 50
        }, 
        'search_test': False, 
        'download_test': False,
        'error': None
    }
    illustrations_results = {'generated_count': 0}
    integration_results = {'visual_integration': False, 'elements_count': 0}
    
    # Tests selon l'option choisie
    if not args.test_only or args.test_only == 'unsplash':
        if access_key:
            unsplash_results = test_unsplash_connection(access_key, secret_key)
        else:
            print("üîå Test Unsplash ignor√© - Pas de cl√© API fournie")
    
    if not args.test_only or args.test_only == 'illustrations':
        illustrations_results = test_illustrations_css()
    
    if not args.test_only or args.test_only == 'integration':
        integration_results = test_visual_integration(access_key, secret_key)
    
    # G√©n√©rer le rapport
    print("\n" + "=" * 60)
    print("üìä G√âN√âRATION DU RAPPORT...")
    
    report = generate_test_report(unsplash_results, illustrations_results, integration_results)
    print(report)
    
    # Sauvegarder le rapport si demand√©
    if args.save_report:
        report_path = Path(args.save_report)
        report_path.write_text(report, encoding='utf-8')
        print(f"\nüíæ Rapport sauvegard√©: {report_path}")
    
    # Status de sortie
    overall_success = (
        (not access_key or unsplash_results['connection']) and
        illustrations_results['generated_count'] >= 4 and
        integration_results['visual_integration']
    )
    
    print(f"\nüèÅ TESTS TERMIN√âS - {'‚úÖ SUCC√àS' if overall_success else '‚ùå √âCHECS D√âTECT√âS'}")
    
    if not overall_success:
        sys.exit(1)

if __name__ == "__main__":
    main() 