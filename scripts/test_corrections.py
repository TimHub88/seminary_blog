#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de test pour v√©rifier les corrections des erreurs critiques
Seminary Blog System - Test des m√©thodes corrig√©es
"""

import sys
import traceback
from bs4 import BeautifulSoup

def test_image_handler():
    """Test des m√©thodes ImageHandler corrig√©es."""
    print("üß™ TEST 1: ImageHandler - M√©thodes manquantes")
    
    try:
        from image_handler import ImageHandler
        
        handler = ImageHandler()
        
        # Test 1: _generate_icon_illustration
        print("   ‚úì Test _generate_icon_illustration...")
        icon_html = handler.generate_css_illustration('icon', 'professional')
        assert '<div class="seminary-icons-grid"' in icon_html
        assert len(icon_html) > 1000
        print(f"     ‚Üí HTML g√©n√©r√©: {len(icon_html)} caract√®res")
        
        # Test 2: _generate_diagram_css
        print("   ‚úì Test _generate_diagram_css...")
        diagram_html = handler.generate_css_illustration('diagram', 'professional', diagram_type='process')
        assert '<div class="seminary-process-diagram"' in diagram_html
        assert len(diagram_html) > 1000
        print(f"     ‚Üí HTML g√©n√©r√©: {len(diagram_html)} caract√®res")
        
        # Test 3: _generate_default_illustration
        print("   ‚úì Test _generate_default_illustration...")
        default_html = handler.generate_css_illustration('unknown_type', 'professional')
        assert '<div class="seminary-default-illustration"' in default_html
        assert len(default_html) > 500
        print(f"     ‚Üí HTML g√©n√©r√©: {len(default_html)} caract√®res")
        
        # Test 4: Suggestions d'illustrations
        print("   ‚úì Test suggest_illustrations_for_article...")
        suggestions = handler.suggest_illustrations_for_article(
            "Nos statistiques montrent une am√©lioration de la performance des √©quipes",
            "Am√©liorer la performance avec Seminary"
        )
        assert len(suggestions) > 0
        print(f"     ‚Üí {len(suggestions)} suggestions g√©n√©r√©es")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        traceback.print_exc()
        return False

def test_seminary_integrator():
    """Test du SeminaryIntegrator corrig√©."""
    print("\nüß™ TEST 2: SeminaryIntegrator - Cr√©ation de liens")
    
    try:
        from seminary_integrator import SeminaryIntegrator
        
        integrator = SeminaryIntegrator()
        
        # HTML de test complet
        test_html = """
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <title>Test Article</title>
        </head>
        <body>
            <div class="article-content">
                <h1>Test des s√©minaires Seminary</h1>
                <p>Les s√©minaires d'entreprise permettent d'am√©liorer la coh√©sion d'√©quipe.</p>
                <p>Nos statistiques montrent des r√©sultats exceptionnels pour les entreprises.</p>
                <p>Pour organiser votre √©v√©nement, consultez nos services de r√©servation.</p>
            </div>
        </body>
        </html>
        """
        
        print("   ‚úì Test process_article...")
        result = integrator.process_article(test_html, "Test des s√©minaires")
        
        assert 'modified_html' in result
        assert 'links_added' in result
        assert 'confidence_score' in result
        
        modified_html = result['modified_html']
        
        # V√©rifier que le HTML n'est pas corrompu
        soup = BeautifulSoup(modified_html, 'html.parser')
        assert soup.find('html') is not None
        assert soup.find('head') is not None
        assert soup.find('body') is not None
        assert soup.find('h1') is not None
        
        print(f"     ‚Üí Score de confiance: {result['confidence_score']:.2f}")
        print(f"     ‚Üí Liens ajout√©s: {result['links_added']}")
        print(f"     ‚Üí HTML valide: {len(modified_html)} caract√®res")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        traceback.print_exc()
        return False

def test_visual_integration():
    """Test de l'int√©gration visuelle corrig√©e."""
    print("\nüß™ TEST 3: Int√©gration visuelle - BeautifulSoup parsing")
    
    try:
        from image_handler import ImageHandler
        from bs4 import BeautifulSoup
        
        handler = ImageHandler()
        
        # HTML de base
        base_html = """
        <div class="article-content">
            <p>Premier paragraphe de test.</p>
            <p>Deuxi√®me paragraphe pour l'int√©gration.</p>
            <p>Troisi√®me paragraphe de conclusion.</p>
        </div>
        """
        
        # Test d'int√©gration d'illustration
        soup = BeautifulSoup(base_html, 'html.parser')
        content_div = soup.find('div', class_='article-content')
        
        # G√©n√©rer une illustration
        illustration_html = handler.generate_css_illustration('icon', 'professional')
        
        # Cr√©er un conteneur
        illustration_div = soup.new_tag('div', class_='visual-illustration')
        
        # TEST CRITIQUE: Parser le HTML correctement
        illustration_soup = BeautifulSoup(illustration_html, 'html.parser')
        for element in illustration_soup:
            if element.name:  # Ignorer les √©l√©ments texte
                illustration_div.append(element)
        
        # Ins√©rer dans le document
        paragraphs = content_div.find_all('p')
        if len(paragraphs) > 1:
            paragraphs[1].insert_after(illustration_div)
        
        # V√©rifier le r√©sultat
        final_html = str(soup)
        
        assert 'visual-illustration' in final_html
        assert 'seminary-icons-grid' in final_html
        assert len(paragraphs) == 3  # Structure pr√©serv√©e
        
        print("   ‚úì Test parsing HTML avec BeautifulSoup...")
        print(f"     ‚Üí HTML final: {len(final_html)} caract√®res")
        print("     ‚Üí Structure DOM pr√©serv√©e")
        print("     ‚Üí Illustration int√©gr√©e avec succ√®s")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        traceback.print_exc()
        return False

def test_html_validation():
    """Test de la validation HTML finale."""
    print("\nüß™ TEST 4: Validation HTML - Balises requises")
    
    try:
        # HTML complet avec toutes les balises requises
        complete_html = """
        <!DOCTYPE html>
        <html lang="fr">
        <head>
            <meta charset="UTF-8">
            <title>Article Seminary Test</title>
            <meta name="description" content="Description de test">
        </head>
        <body>
            <div class="article-content">
                <h1>Titre de l'article Seminary</h1>
                <p>Contenu de l'article avec plus de 500 caract√®res pour respecter les seuils de validation. Ce paragraphe contient suffisamment de texte pour passer tous les tests de longueur minimale requis par le syst√®me de validation du g√©n√©rateur d'articles Seminary Blog. Les validations incluent la pr√©sence des balises HTML essentielles comme html, head, title, body et h1.</p>
            </div>
        </body>
        </html>
        """
        
        # V√©rifier les balises requises
        required_tags = ['<html>', '<head>', '<title>', '<body>', '<h1>']
        missing_tags = [tag for tag in required_tags if tag not in complete_html]
        
        assert len(missing_tags) == 0, f"Balises manquantes: {missing_tags}"
        assert len(complete_html) > 500, "HTML trop court"
        
        # V√©rifier avec BeautifulSoup
        soup = BeautifulSoup(complete_html, 'html.parser')
        assert soup.find('html') is not None
        assert soup.find('head') is not None
        assert soup.find('title') is not None
        assert soup.find('body') is not None
        assert soup.find('h1') is not None
        
        print("   ‚úì Test validation HTML...")
        print(f"     ‚Üí Toutes les balises requises pr√©sentes: {required_tags}")
        print(f"     ‚Üí Taille HTML: {len(complete_html)} caract√®res")
        print("     ‚Üí Structure DOM valide")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå ERREUR: {e}")
        traceback.print_exc()
        return False

def main():
    """Lance tous les tests de correction."""
    print("üöÄ TESTS DE VALIDATION DES CORRECTIONS SEMINARY BLOG")
    print("=" * 60)
    
    tests = [
        test_image_handler,
        test_seminary_integrator, 
        test_visual_integration,
        test_html_validation
    ]
    
    passed = 0
    failed = 0
    
    for test_func in tests:
        try:
            if test_func():
                passed += 1
                print("   ‚úÖ SUCC√àS")
            else:
                failed += 1
                print("   ‚ùå √âCHEC")
        except Exception as e:
            failed += 1
            print(f"   ‚ùå ERREUR CRITIQUE: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä R√âSULTATS: {passed} succ√®s, {failed} √©checs")
    
    if failed == 0:
        print("üéâ TOUS LES TESTS PASSENT - Corrections valid√©es!")
        print("‚úÖ Le syst√®me Seminary Blog est op√©rationnel")
        return 0
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√© - V√©rification requise")
        return 1

if __name__ == "__main__":
    sys.exit(main()) 